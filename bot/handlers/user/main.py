import json

from telebot import types
from telebot import TeleBot
from telebot.types import Message, CallbackQuery

from bot.buttons import NameOfButton
from bot.handlers.utils import get_user_existing_or_admin, validate_ukrainian_phone_number, \
    generate_unique_filename, check_date_format, parse_date_values, get_lease_info
from bot.keyboard.reply.main import ReplyKeyboard
from bot.states.main import AddNewLeaseState
from database import Database


def user_start_command(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.ADD_NEW_LEASE_ENTRY,
                                                NameOfButton.FIND_LEASE_ENTRY)
    # NameOfButton.DELETE_ENTRY,
    # NameOfButton.EDIT_ENTRY,

    # NameOfButton.UPLOAD_TO_EXCEL)

    bot.send_message(message.chat.id, f'üëã–ü—Ä–∏–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name}', reply_markup=keyboard)


def add_new_lease_button(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞üì±',
                     reply_markup=types.ReplyKeyboardRemove())
    bot.set_state(message.from_user.id, AddNewLeaseState.add_client_number, message.chat.id)
    bot.register_next_step_handler(message, add_client_number, bot)


def add_client_number(message: Message, bot: TeleBot):
    data = {}
    phone_number = validate_ukrainian_phone_number(message.text)
    if phone_number is None:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìµ\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')
        bot.register_next_step_handler(message, add_client_number, bot)
    else:
        db = Database()
        client = db.get_client_by_phone_number(phone_number)
        if client is None:
            bot.send_message(message.chat.id, '–í –±–∞–∑–µ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞, —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìñ.\n–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ‚úçÔ∏è.')
            bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∫–ª–∏–µ–Ω—Ç–∞üë±‚Äç‚ôÇÔ∏è')

            data['phone_number'] = phone_number
            bot.register_next_step_handler(message, get_client_name, bot, data)
        else:
            bot.send_message(message.chat.id, '‚ö†Ô∏è–¢–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!\n\n'
                                              f'üë±‚Äç‚ôÇÔ∏è–ò–º—è: {client.name}\n'
                                              f'üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {", ".join([phone_number.number for phone_number in client.phone_numbers])}')
            ask_apartment_address(message, bot, {'client_id': client.id})


def get_client_name(message: Message, bot: TeleBot, data):
    client_name = message.text
    keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.CONFIRM_PHOTOS_UPLOADING)
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤üìë.\n\n'
                                      '–í–ê–ñ–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ üëç',
                     reply_markup=keyboard)
    data['client_name'] = client_name
    data['path_images'] = []
    bot.set_state(message.from_user.id, AddNewLeaseState.get_document_photos, message.chat.id)
    bot.register_next_step_handler(message, get_document_photos, bot, data)


def get_document_photos(message: Message, bot: TeleBot, data):
    if message.content_type == 'photo':
        path_image = f'doc_images/{generate_unique_filename()}.jpg'
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(path_image, 'wb') as new_file:
            new_file.write(downloaded_file)
        bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ‚úÖ')
        data['path_images'].append(path_image)
        bot.register_next_step_handler(message, get_document_photos, bot, data)
    elif message.content_type == 'text':
        if message.text == 'üëç':
            add_client_into_db(message, bot, data)


def add_client_into_db(message: Message, bot: TeleBot, data):
    client_name = data.get('client_name')
    phone_number = data.get('phone_number')
    path_images = data.get('path_images')
    db = Database()
    client_id = db.add_client(client_name, [phone_number], path_images)
    bot.send_message(message.chat.id, 'üÜï–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç\n\n'
                                      f'üë±‚Äç‚ôÇÔ∏è–ò–º—è: {client_name}\n'
                                      f'üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n'
                                      f'üìë–ö–æ–ª-–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(path_images)}\n\n'
                                      '‚úÖ–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=types.ReplyKeyboardRemove())
    data = {'client_id': client_id}
    ask_apartment_address(message, bot, data)


def ask_apartment_address(message: Message, bot: TeleBot, data):
    db = Database()
    apartments = db.get_all_apartments()
    markup = types.InlineKeyboardMarkup()
    for apartment in apartments:
        data_ = data.copy()
        data_['apartment_id'] = apartment.id
        markup.add(types.InlineKeyboardButton(apartment.address, callback_data=json.dumps(data_)))
    markup.add(types.InlineKeyboardButton('üÜï–î–æ–±–∞–≤–∏—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å', callback_data=json.dumps(data)))
    f = bot.send_message(message.chat.id, 'ü§î–í—ã–±–µ—Ä–µ—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.', reply_markup=markup)


def apartment_callback(callback: CallbackQuery, bot: TeleBot):
    if callback.message:
        data = json.loads(callback.data)
        if data.get('apartment_id'):
            bot.edit_message_text('üóì–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å –ø–µ—Ä–∏–æ–¥ —Å–¥–∞—á–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n\n'
                                  '‚ö†Ô∏è–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "–î–î.MM.–ì–ì–ì–ì:–ß–ß.–ú–ú-–î–î.MM.–ì–ì–ì–ì:–ß–ß.–ú–ú"\n'
                                  '–ù–∞–ø—Ä–∏–º–µ—Ä: 26.11.2023:12.00-26.01.2024:13.00',
                                  callback.message.chat.id,
                                  callback.message.message_id, reply_markup=None)
            bot.register_next_step_handler(callback.message, get_rent_period, bot, data)
        else:
            bot.edit_message_text('üè†–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã', callback.message.chat.id, callback.message.message_id,
                                  reply_markup=None)
            bot.register_next_step_handler(callback.message, get_new_apartment_address, bot, data)


def get_new_apartment_address(message: Message, bot: TeleBot, data):
    apartment_address = message.text
    db = Database()
    apartment_id = db.add_apartment(apartment_address)
    bot.send_message(message.chat.id, '‚úÖ–ö–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –Ω–æ–≤–æ–º—É –∞–¥—Ä–µ—Å—É —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    bot.send_message(message.chat.id, 'üóì–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å –ø–µ—Ä–∏–æ–¥ —Å–¥–∞—á–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n\n'
                                      '‚ö†Ô∏è–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "–î–î.MM.–ì–ì–ì–ì:–ß–ß.–ú–ú-–î–î.MM.–ì–ì–ì–ì:–ß–ß.–ú–ú"\n'
                                      '–ù–∞–ø—Ä–∏–º–µ—Ä: 26.11.2023:12.00-26.01.2024:13.00')
    data['apartment_id'] = apartment_id
    bot.register_next_step_handler(message, get_rent_period, bot, data)


def get_rent_period(message: Message, bot: TeleBot, data: dict):
    if not check_date_format(message.text):
        bot.send_message(message.chat.id, '‚ùå–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n'
                                          '‚ö†Ô∏è–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: "–î–î.MM.–ì–ì–ì–ì:–ß–ß.–ú–ú-–î–î.MM.–ì–ì–ì–ì:–ß–ß.–ú–ú"')
        bot.register_next_step_handler(message, get_rent_period, bot, data)
    else:
        start_date, end_date = parse_date_values(message.text)
        data['start_date'] = start_date
        data['end_date'] = end_date
        bot.send_message(message.chat.id, 'üíµ–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—É–º–º—É –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã')
        bot.register_next_step_handler(message, get_rent_amount, bot, data)


def get_rent_amount(message: Message, bot: TeleBot, data: dict):
    if not message.text.isdigit() or not message.text.isdecimal():
        bot.send_message(message.chat.id, '‚ùå–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n'
                                          '‚ö†Ô∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
        bot.register_next_step_handler(message, get_rent_period, bot, data)
    else:
        data['rent_amount'] = float(message.text)
        bot.send_message(message.chat.id, 'üí∏–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—É–º–º—É –∑–∞–ª–æ–≥–∞')
        bot.register_next_step_handler(message, get_deposit, bot, data)


def get_deposit(message: Message, bot: TeleBot, data: dict):
    if not message.text.isdigit() or not message.text.isdecimal():
        bot.send_message(message.chat.id, '‚ùå–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n'
                                          '‚ö†Ô∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
        bot.register_next_step_handler(message, get_deposit, bot, data)
    else:
        data['deposit'] = float(message.text)
        bot.send_message(message.chat.id, '‚úçÔ∏è–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n\n'
                                          '‚ö†Ô∏è–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É 0')
        bot.register_next_step_handler(message, get_additional_details, bot, data)


def get_additional_details(message: Message, bot: TeleBot, data: dict):
    if message.text.isdigit():
        if int(message.text) == 0:
            data['additional_details'] = ''
            bot.send_message(message.chat.id, 'üí®–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–ø—É—â–µ–Ω')
    else:
        data['additional_details'] = message.text
        bot.send_message(message.chat.id, '‚úÖ–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω')
    add_new_lease_into_db(message, bot, data)


def add_new_lease_into_db(message: Message, bot: TeleBot, data: dict):
    db = Database()
    client_id = data.get('client_id')
    apartment_id = data.get('apartment_id')
    start_date = data.get('start_date')
    end_date = data.get('end_date')
    rent_amount = data.get('rent_amount')
    deposit = data.get('deposit')
    additional_details = data.get('additional_details')
    lease_id = db.add_lease(client_id, apartment_id, start_date, end_date, rent_amount, deposit, additional_details)
    lease = db.get_lease_by_id(lease_id)
    lease_info_message = get_lease_info(lease)
    bot.send_message(message.chat.id, '‚úÖ–ó–∞–ø–∏—Å—å –æ–± –∞—Ä–µ–Ω–¥–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n' + lease_info_message)


def find_lease_button(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.FIND_LEASE_BY_PHONE_NUMBER,
                                                NameOfButton.FIND_LEASE_BY_DATE)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏', reply_markup=keyboard)


def find_lease_by_phone_button(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∞—Ä–µ–Ω–¥',
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_phone_number_for_search, bot)


def get_phone_number_for_search(message: Message, bot: TeleBot):
    phone_number = validate_ukrainian_phone_number(message.text)
    if phone_number:
        db = Database()
        leases = db.search_leases(phone_number=phone_number)
        if leases:
            message_info_leases = '\n\n'.join(get_lease_info(lease) for lease in leases)
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã —Ç–∞–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:\n\n' + message_info_leases)
        else:
            bot.send_message(message.chat.id, '–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    else:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìµ\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')
        bot.register_next_step_handler(message, get_phone_number_for_search, bot)


def register_user_handlers(bot):
    bot.register_message_handler(user_start_command,
                                 commands=['user_start'],
                                 pass_bot=True)

    bot.register_message_handler(add_new_lease_button,
                                 func=lambda message: message.text == NameOfButton.ADD_NEW_LEASE_ENTRY,
                                 pass_bot=True)
    bot.register_message_handler(find_lease_button,
                                 func=lambda message: message.text == NameOfButton.FIND_LEASE_ENTRY,
                                 pass_bot=True)
    bot.register_message_handler(find_lease_by_phone_button,
                                 func=lambda message: message.text == NameOfButton.FIND_LEASE_BY_PHONE_NUMBER,
                                 pass_bot=True)


def register_user_callback_handlers(bot):
    bot.register_callback_query_handler(apartment_callback,
                                        func=lambda call: True,
                                        pass_bot=True)
