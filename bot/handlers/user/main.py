import json
from datetime import datetime

from telebot import types, ContinueHandling
from telebot import TeleBot
from telebot.types import Message, CallbackQuery

from bot.buttons import NameOfButton
from bot.handlers.utils import get_user_existing_or_admin, validate_ukrainian_phone_number, \
    generate_unique_filename, check_date_format, parse_date_values, get_lease_info, USER_START_MENU
from bot.keyboard.reply.main import ReplyKeyboard
from bot.states.main import AddNewLeaseState
from database import Database


def user_start_command(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)

    bot.send_message(message.chat.id, f'üëã–ü—Ä–∏–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name}', reply_markup=keyboard)


def add_new_lease_button(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.CANCEL)
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞üì±',
                     reply_markup=keyboard)
    bot.set_state(message.from_user.id, AddNewLeaseState.add_client_number, message.chat.id)
    bot.register_next_step_handler(message, add_client_number, bot)


def add_client_number(message: Message, bot: TeleBot):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    data = {}
    phone_number = validate_ukrainian_phone_number(message.text)
    if phone_number is None:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìµ\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')
        bot.register_next_step_handler(message, add_client_number, bot)
    else:
        db = Database()
        client = db.get_client_by_phone_number(phone_number)
        if client is None:
            bot.send_message(message.chat.id, '–í –±–∞–∑–µ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞, —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìñ.\n–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ‚úçÔ∏è.')
            # bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –∫–ª–∏–µ–Ω—Ç–∞üë±‚Äç‚ôÇÔ∏è')

            data['phone_number'] = phone_number
            add_client_into_db(message, bot, data)
            # bot.register_next_step_handler(message, get_client_name, bot, data)
        else:
            bl_entry = db.get_blacklist_entry(client.id)
            if bl_entry:
                keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
                bot.send_message(message.chat.id,
                                 '‚õî‚õî‚õî–ö–ª–∏–µ–Ω—Ç –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ!\n\n'
                                 f'üë±‚Äç‚ôÇÔ∏è–ò–º—è: {client.name if client.name else "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"}\n'
                                 f'üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {", ".join([phone_number.number for phone_number in client.phone_numbers])}\n'
                                 f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ß–°: {bl_entry.comment}',
                                 reply_markup=keyboard)
            else:
                bot.send_message(message.chat.id,
                                 '‚ö†Ô∏è–° —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –æ –∫–ª–∏–µ–Ω—Ç–µ!\n\n'
                                 f'üë±‚Äç‚ôÇÔ∏è–ò–º—è: {client.name if client.name else "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"}\n'
                                 f'üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {", ".join([phone_number.number for phone_number in client.phone_numbers])}',
                                 reply_markup=types.ReplyKeyboardRemove())
                ask_apartment_address(message, bot, {'client_id': client.id})


def add_client_into_db(message: Message, bot: TeleBot, data):
    client_name = data.get('client_name')
    client_name = client_name if client_name else ''
    phone_number = data.get('phone_number')
    path_images = data.get('path_images')
    path_images = path_images if path_images else []
    db = Database()
    client_id = db.add_client(client_name, [phone_number], path_images)
    bot.send_message(message.chat.id, 'üÜï–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç\n\n'
                                      f'üë±‚Äç‚ôÇÔ∏è–ò–º—è: {client_name if client_name else "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"}\n'
                                      f'üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n'
                                      f'üìë–ö–æ–ª-–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ: {len(path_images)}\n\n'
                                      '‚úÖ–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=types.ReplyKeyboardRemove())
    data = {'client_id': client_id}
    ask_apartment_address(message, bot, data)


def ask_apartment_address(message: Message, bot: TeleBot, data):
    db = Database()
    apartments = db.get_all_apartments()
    markup = types.InlineKeyboardMarkup()
    for apartment in apartments:
        data_ = data.copy()
        data_['apartment_id'] = apartment.id
        markup.add(types.InlineKeyboardButton(apartment.address, callback_data=json.dumps(data_)))
    markup.add(types.InlineKeyboardButton('üÜï–î–æ–±–∞–≤–∏—Ç—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å', callback_data=json.dumps(data)))
    markup.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data=NameOfButton.CANCEL))
    bot.send_message(message.chat.id, 'ü§î–í—ã–±–µ—Ä–µ—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.', reply_markup=markup)


def apartment_callback(callback: CallbackQuery, bot: TeleBot):
    if callback.message:
        if callback.data == NameOfButton.CANCEL:
            bot.edit_message_text('–û—Ç–º–µ–Ω–µ–Ω–æ',
                                  callback.message.chat.id,
                                  callback.message.message_id, reply_markup=None)
            keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
            bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç –º–µ–Ω—é', reply_markup=keyboard)
            return
        data = json.loads(callback.data)
        keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.CANCEL)
        if data.get('apartment_id'):
            bot.edit_message_text('üóì–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ —Å–¥–∞—á–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n\n'
                                  '‚ö†Ô∏è–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "–î–î.MM/–ß–ß.–ú–ú"\n'
                                  '–ò–ª–∏ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ–¥ –≤ —Ä—É—á–Ω—É—é, —Ç–æ —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:\n'
                                  '"–î–î.MM.–ì–ì–ì–ì/–ß–ß.–ú–ú"',
                                  callback.message.chat.id,
                                  callback.message.message_id, reply_markup=None)
            bot.send_message(callback.message.chat.id,
                             '–ù–∞–ø—Ä–∏–º–µ—Ä: 26.11/12:00 –∏–ª–∏ 26.11.2023/12:00',
                             reply_markup=keyboard)
            bot.register_next_step_handler(callback.message, get_rent_period_start, bot, data)
        elif data.get('callback'):
            return ContinueHandling()
        else:
            bot.edit_message_text('üè†–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã', callback.message.chat.id, callback.message.message_id,
                                  reply_markup=None)
            bot.send_message(callback.message.chat.id, '–∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.', reply_markup=keyboard)
            bot.register_next_step_handler(callback.message, get_new_apartment_address, bot, data)


def get_new_apartment_address(message: Message, bot: TeleBot, data):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    apartment_address = message.text
    db = Database()
    apartment_id = db.add_apartment(apartment_address)
    bot.send_message(message.chat.id, '‚úÖ–ö–≤–∞—Ä—Ç–∏—Ä–∞ –ø–æ –Ω–æ–≤–æ–º—É –∞–¥—Ä–µ—Å—É —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!')
    bot.send_message(message.chat.id, 'üóì–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ —Å–¥–∞—á–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã.\n\n'
                                      '‚ö†Ô∏è–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "–î–î.MM/–ß–ß.–ú–ú"\n'
                                      '–ò–ª–∏ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ–¥ –≤ —Ä—É—á–Ω—É—é, —Ç–æ —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:\n'
                                      '"–î–î.MM.–ì–ì–ì–ì/–ß–ß.–ú–ú"\n\n'
                                      '–ù–∞–ø—Ä–∏–º–µ—Ä: 26.11/12:00 –∏–ª–∏ 26.11.2023/12:00')
    data['apartment_id'] = apartment_id
    bot.register_next_step_handler(message, get_rent_period_start, bot, data)


def get_rent_period_start(message: Message, bot: TeleBot, data: dict):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    start_date = check_date_format(message.text)
    if start_date is None:
        bot.send_message(message.chat.id, '‚ùå–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n'
                                          '‚ö†Ô∏è–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: "–î–î.MM/–ß–ß.–ú–ú"\n\n'
                                          '–ò–ª–∏ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ–¥ –≤ —Ä—É—á–Ω—É—é, —Ç–æ —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:\n'
                                          '"–î–î.MM.–ì–ì–ì–ì/–ß–ß.–ú–ú"')
        bot.register_next_step_handler(message, get_rent_period_start, bot, data)
    else:
        data['start_date'] = start_date
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ —Å–¥–∞—á–∏')
        bot.register_next_step_handler(message, get_rent_period_end, bot, data)


def get_rent_period_end(message: Message, bot: TeleBot, data: dict):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    end_date = check_date_format(message.text)
    if end_date is None:
        bot.send_message(message.chat.id, '‚ùå–ù–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n'
                                          '‚ö†Ô∏è–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: "–î–î.MM/–ß–ß.–ú–ú"\n\n'
                                          '–ò–ª–∏ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –≥–æ–¥ –≤ —Ä—É—á–Ω—É—é, —Ç–æ —Ñ–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:\n'
                                          '"–î–î.MM.–ì–ì–ì–ì/–ß–ß.–ú–ú"')
        bot.register_next_step_handler(message, get_rent_period_end, bot, data)

    else:
        if data.get('start_date') > end_date:
            bot.send_message(message.chat.id, '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã –±–æ–ª—å—à–µ —á–µ–º –∫–æ–Ω–µ—á–Ω–∞—è!\n'
                                              '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã')
            bot.register_next_step_handler(message, get_rent_period_end, bot, data)
        db = Database()
        overlapping_lease_id = db.get_lease_id_by_date_time_range(data.get('apartment_id'),
                                                                  data.get('start_date'),
                                                                  end_date)
        if overlapping_lease_id is None:
            data['end_date'] = end_date
            keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.NO_DEPOSIT, NameOfButton.CANCEL)
            bot.send_message(message.chat.id, 'üíµ–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—É–º–º—É –∑–∞–ª–æ–≥–∞\n\n'
                                              '–ï—Å–ª–∏ –∑–∞–ª–æ–≥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø–∏—à–∏—Ç–µ 0, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É',
                             reply_markup=keyboard)
            bot.register_next_step_handler(message, get_deposit, bot, data)
        else:
            overlapping_lease = db.get_lease_by_id(overlapping_lease_id)
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –¥–∞—Ç —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±—Ä–æ–Ω—å—é!')
            bot.send_message(message.chat.id, get_lease_info(overlapping_lease))
            bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã')
            bot.register_next_step_handler(message, get_rent_period_start, bot, data)


def get_deposit(message: Message, bot: TeleBot, data: dict):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    elif message.text == NameOfButton.NO_DEPOSIT or message.text == '0':
        keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.CANCEL)
        bot.send_message(message.chat.id, '–ó–∞–ª–æ–≥ –¥–ª—è —ç—Ç–æ–π –±—Ä–æ–Ω–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è\n\n', reply_markup=keyboard)
        bot.send_message(message.chat.id, 'üí∏–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—É–º–º—É –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã')
        data['deposit'] = 0.0
        bot.register_next_step_handler(message, get_rent_amount, bot, data)
    elif not message.text.isdigit() or not message.text.isdecimal():
        bot.send_message(message.chat.id, '‚ùå–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n'
                                          '‚ö†Ô∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
        bot.register_next_step_handler(message, get_rent_period_start, bot, data)
    else:
        data['deposit'] = float(message.text)
        keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.CANCEL)
        bot.send_message(message.chat.id, '‚ö†Ô∏è–í–Ω–∏–º–∞–Ω–∏–µ! –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏ '
                                          '—Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ –≤–Ω–µ—Å–µ–Ω–∏–µ '
                                          '–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø—É–Ω–∫—Ç–µ –º–µ–Ω—é', reply_markup=keyboard)
        bot.send_message(message.chat.id, 'üí∏–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—É–º–º—É –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã')
        bot.register_next_step_handler(message, get_rent_amount, bot, data)


def get_rent_amount(message: Message, bot: TeleBot, data: dict):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    if not message.text.isdigit() or not message.text.isdecimal():
        bot.send_message(message.chat.id, '‚ùå–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.\n'
                                          '‚ö†Ô∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
        bot.register_next_step_handler(message, get_deposit, bot, data)
    else:
        data['rent_amount'] = float(message.text)
        bot.send_message(message.chat.id, '‚úçÔ∏è–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n\n'
                                          '‚ö†Ô∏è–ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω—É–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–∏—Ñ—Ä—É 0')
        bot.register_next_step_handler(message, get_additional_details, bot, data)


def get_additional_details(message: Message, bot: TeleBot, data: dict):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    if message.text.isdigit():
        if int(message.text) == 0:
            data['additional_details'] = ''
            bot.send_message(message.chat.id, 'üí®–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø—Ä–æ–ø—É—â–µ–Ω')
    else:
        data['additional_details'] = message.text
        bot.send_message(message.chat.id, '‚úÖ–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω')
    add_new_lease_into_db(message, bot, data)


def add_new_lease_into_db(message: Message, bot: TeleBot, data: dict):
    db = Database()
    client_id = data.get('client_id')
    apartment_id = data.get('apartment_id')
    start_date = data.get('start_date')
    end_date = data.get('end_date')
    rent_amount = data.get('rent_amount')
    deposit = data.get('deposit')
    additional_details = data.get('additional_details')
    lease_id = db.add_lease(client_id, apartment_id, start_date, end_date, rent_amount, deposit, additional_details,
                            False)
    lease = db.get_lease_by_id(lease_id)
    lease_info_message = get_lease_info(lease)
    keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
    bot.send_message(message.chat.id, '‚úÖ–ó–∞–ø–∏—Å—å –æ–± –∞—Ä–µ–Ω–¥–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n' + lease_info_message,
                     reply_markup=keyboard)


def find_lease_button(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.FIND_LEASE_BY_PHONE_NUMBER,
                                                NameOfButton.FIND_LEASE_BY_DATE)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ –∫–∞–∫–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏', reply_markup=keyboard)


def find_lease_by_phone_button(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∞—Ä–µ–Ω–¥',
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_phone_number_for_search, bot)


def get_phone_number_for_search(message: Message, bot: TeleBot):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    phone_number = validate_ukrainian_phone_number(message.text)
    if phone_number:
        db = Database()
        leases = db.search_leases(phone_number=phone_number)
        if leases:
            message_info_leases = '\n\n'.join(get_lease_info(lease) for lease in leases)
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω—ã —Ç–∞–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è:\n\n' + message_info_leases)
        else:
            bot.send_message(message.chat.id, '–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
    else:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìµ\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')
        bot.register_next_step_handler(message, get_phone_number_for_search, bot)


def make_deposit_button(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.CANCEL)
    bot.send_message(message.chat.id, '–î–ª—è –ø–æ–º–µ—Ç–∫–∏ –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∑–∞–ª–æ–≥–∞\n'
                                      '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞',
                     reply_markup=keyboard)
    bot.register_next_step_handler(message, get_phone_number_for_make_deposit, bot)


def get_phone_number_for_make_deposit(message: Message, bot: TeleBot):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    phone_number = validate_ukrainian_phone_number(message.text)
    if phone_number is None:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìµ\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')
        bot.register_next_step_handler(message, get_phone_number_for_make_deposit, bot)
    else:
        db = Database()
        leases = db.search_leases(phone_number=phone_number,
                                  start_date=datetime.utcnow(),
                                  is_deposit_paid=False)
        for lease in leases:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton('‚úÖ–ó–∞–ª–æ–≥ –≤–Ω–µ—Å–µ–Ω', callback_data=json.dumps(
                {'lease_id': lease.id, 'callback': 'is_deposit_paid'})))
            bot.send_message(message.chat.id, get_lease_info(lease), reply_markup=markup)
        if not leases:
            keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
            bot.send_message(message.chat.id,
                             '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, —Ç—Ä–µ–±—É—é—â–∏—Ö –ø–æ–º–µ—Ç–∫–∏ –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∑–∞–ª–æ–≥–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
                             reply_markup=keyboard)


def is_deposit_paid_callback(callback: CallbackQuery, bot: TeleBot):
    if callback.message:
        data = json.loads(callback.data)
        if data.get('callback') != 'is_deposit_paid':
            return ContinueHandling()
        lease_id = data.get('lease_id')
        if lease_id:
            db = Database()
            db.update_lease(lease_id, is_deposit_paid=True)
            bot.edit_message_text('–ü–æ–º–µ—Ç–∫–∞ –æ –≤–Ω–µ—Å–µ–Ω–∏–∏ –∑–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.',
                                  callback.message.chat.id,
                                  callback.message.message_id, reply_markup=None)
            keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
            bot.send_message(callback.message.chat.id, '–¢–µ–ø–µ—Ä—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ.', reply_markup=keyboard)


def check_in_button(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    db = Database()
    available_leases = db.get_available_leases_today()
    available_leases = [lease for lease in available_leases if lease.is_inhabited == False]
    if available_leases:
        bot.send_message(message.chat.id,
                         '–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –∑–∞—Å–µ–ª–µ–Ω–∏–µ',
                         reply_markup=types.ReplyKeyboardRemove())
    for lease in available_leases:
        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton('–ó–∞—Å–µ–ª–µ–Ω–∏–µ',
                                       callback_data=json.dumps({'lease_id': lease.id, 'callback': 'check_in'})))
        markup.add(types.InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data=NameOfButton.CANCEL))
        bot.send_message(message.chat.id, get_lease_info(lease), reply_markup=markup)
    if not available_leases:
        bot.send_message(message.chat.id, '–ù–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å')


def check_in_callback(callback: CallbackQuery, bot: TeleBot):
    if callback.message:
        data = json.loads(callback.data)
        if data.get('callback') != 'check_in':
            return ContinueHandling
        if callback.data == NameOfButton.CANCEL:
            bot.edit_message_text('–û—Ç–º–µ–Ω–µ–Ω–æ',
                                  callback.message.chat.id,
                                  callback.message.message_id, reply_markup=None)
            keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
            bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—É–Ω–∫—Ç –º–µ–Ω—é', reply_markup=keyboard)
        else:
            bot.edit_message_text(callback.message.text,
                                  callback.message.chat.id,
                                  callback.message.message_id,
                                  reply_markup=None)
            db = Database()
            lease = db.get_lease_by_id(data.get('lease_id'))
            if not lease.client.name and len(lease.client.documents) == 0:
                bot.send_message(callback.message.chat.id,
                                 '–£ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –∏ –Ω–µ—Ç —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.\n\n –í–≤–µ–¥–∏—Ç–µ –∏–º—è')
                bot.register_next_step_handler(callback.message, get_client_name, bot,
                                               {'lease_id': lease.id, 'client_id': lease.client.id})
            else:
                keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.CONFIRM, NameOfButton.CANCEL)
                lease = db.get_lease_by_id(data.get('lease_id'))
                bot.send_message(callback.message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ–± –∞—Ä–µ–Ω–¥–µ:\n\n' + get_lease_info(lease))
                for document in lease.client.documents:
                    with open(document.filename, 'rb') as file:
                        bot.send_photo(callback.message.chat.id, file)
                bot.send_message(callback.message.chat.id, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—Å–µ–ª–µ–Ω–∏–µ?', reply_markup=keyboard)
                bot.register_next_step_handler(callback.message, check_in_note, bot, data)


def get_client_name(message: Message, bot: TeleBot, data):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    client_name = message.text
    keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.CONFIRM_PHOTOS_UPLOADING, NameOfButton.CANCEL)
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤üìë.\n\n'
                                      '–í–ê–ñ–ù–û! –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–∞–∂–º–∏—Ç–µ üëç',
                     reply_markup=keyboard)
    data['client_name'] = client_name
    data['path_images'] = []
    bot.set_state(message.from_user.id, AddNewLeaseState.get_document_photos, message.chat.id)
    bot.register_next_step_handler(message, get_document_photos, bot, data)


def get_document_photos(message: Message, bot: TeleBot, data):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    if message.content_type == 'photo':
        path_image = f'doc_images/{generate_unique_filename()}.jpg'
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(path_image, 'wb') as new_file:
            new_file.write(downloaded_file)
        bot.send_message(message.chat.id, '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ‚úÖ')
        data['path_images'].append(path_image)
        bot.register_next_step_handler(message, get_document_photos, bot, data)
    elif message.content_type == 'text':
        if message.text == 'üëç':
            db = Database()
            client_name = data.get('client_name')
            path_images = data.get('path_images')
            client_id = data.get('client_id')
            db.update_client(client_id, name=client_name, document_filenames=path_images)
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ –∫–ª–∏–µ–Ω—Ç–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
            keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.CONFIRM, NameOfButton.CANCEL)
            lease = db.get_lease_by_id(data.get('lease_id'))
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–µ –æ–± –∞—Ä–µ–Ω–¥–µ:\n\n' + get_lease_info(lease))
            bot.send_message(message.chat.id, '–§–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:')
            for document in lease.client.documents:
                with open(document.filename, 'rb') as file:
                    bot.send_photo(message.chat.id, file)
            bot.send_message(message.chat.id, '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—Å–µ–ª–µ–Ω–∏–µ?', reply_markup=keyboard)
            bot.register_next_step_handler(message, check_in_note, bot, data)


def check_in_note(message: Message, bot: TeleBot, data):
    if message.text == NameOfButton.CONFIRM:
        lease_id = data.get('lease_id')
        db = Database()
        db.update_lease(lease_id, is_inhabited=True)
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–ü–æ–º–µ—Ç–∫–∞ –æ –∑–∞—Å–µ–ª–µ–Ω–∏–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=keyboard)
    elif message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=keyboard)


def blacklist(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    else:
        keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.ADD_CLIENT_TO_BLACKLIST,
                                                    NameOfButton.REMOVE_CLIENT_FROM_BLACKLIST,
                                                    NameOfButton.CANCEL)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=keyboard)


def add_or_remove_client_in_blacklist(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    elif message.text == NameOfButton.ADD_CLIENT_TO_BLACKLIST:
        keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.CANCEL)
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ß–°',
                         reply_markup=keyboard)
        bot.register_next_step_handler(message, add_to_blacklist, bot)
    elif message.text == NameOfButton.REMOVE_CLIENT_FROM_BLACKLIST:
        keyboard = ReplyKeyboard.get_reply_keyboard(NameOfButton.CANCEL)
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ß–°',
                         reply_markup=keyboard)
        bot.register_next_step_handler(message, remove_from_blacklist, bot)


def add_to_blacklist(message: Message, bot: TeleBot):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    phone_number = validate_ukrainian_phone_number(message.text)
    if phone_number is None:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìµ\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')
        bot.register_next_step_handler(message, add_to_blacklist, bot)
    else:
        db = Database()
        client = db.get_client_by_phone_number(phone_number)
        if client:
            data = {'phone_number': phone_number, 'client_id': client.id}
            bot.send_message(message.chat.id, '–ù–∞–π–¥–µ–Ω –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º')
            bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
            bot.register_next_step_handler(message, add_blacklist_comment, bot, data)
        else:
            bot.send_message(message.chat.id, '–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(message, add_to_blacklist, bot)


def add_blacklist_comment(message: Message, bot: TeleBot, data):
    comment = message.text
    phone_number = data.get('phone_number')
    client_id = data.get('client_id')
    db = Database()
    db.add_to_blacklist(client_id, comment)
    keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
    bot.send_message(message.chat.id, f'–ö–ª–∏–µ–Ω—Ç —Å –Ω–æ–º–µ—Ä–æ–º {phone_number} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ß–°', reply_markup=keyboard)


def remove_from_blacklist(message: Message, bot: TeleBot):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    phone_number = validate_ukrainian_phone_number(message.text)
    if phone_number is None:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìµ\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')
        bot.register_next_step_handler(message, remove_from_blacklist, bot)
    else:
        db = Database()
        client = db.get_client_by_phone_number(phone_number)
        if not client:
            bot.send_message(message.chat.id, '–í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            bot.register_next_step_handler(message, remove_from_blacklist, bot)
            return
        bl_entry = db.get_blacklist_entry(client.id)
        if bl_entry:
            db.remove_from_blacklist(client.id)
            keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
            bot.send_message(message.chat.id, '–ö–ª–∏–µ–Ω—Ç –±—ã–ª —É–±—Ä–∞–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞', reply_markup=keyboard)
        else:
            bot.send_message(message.chat.id, '–í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            bot.register_next_step_handler(message, remove_from_blacklist, bot)
            return


def show_client_data(message: Message, bot: TeleBot):
    user = get_user_existing_or_admin(message, bot)
    if user is None:
        return
    bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞')
    bot.register_next_step_handler(message, get_client_number_for_search, bot)


def get_client_number_for_search(message: Message, bot: TeleBot):
    if message.text == NameOfButton.CANCEL:
        keyboard = ReplyKeyboard.get_reply_keyboard(*USER_START_MENU)
        bot.send_message(message.chat.id, '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=keyboard)
        return
    phone_number = validate_ukrainian_phone_number(message.text)
    if phone_number is None:
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìµ\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä')
        bot.register_next_step_handler(message, get_client_number_for_search, bot)
    else:
        db = Database()
        client = db.get_client_by_phone_number(phone_number)
        if client:
            bot.send_message(message.chat.id, f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ —Å –Ω–æ–º–µ—Ä–æ–º: {phone_number}')
            bot.send_message(message.chat.id,
                             f'üë±‚Äç‚ôÇÔ∏è–ò–º—è: {client.name if client.name else "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"}\n'
                             f'üì±–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {", ".join([phone_number.number for phone_number in client.phone_numbers])}',
                             )
            if len(client.documents):
                for document in client.documents:
                    with open(document.filename, 'rb') as file:
                        bot.send_photo(message.chat.id, file)
            else:
                bot.send_message(message.chat.id, '–§–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.')
        else:
            bot.send_message(message.chat.id, '–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
            bot.register_next_step_handler(message, get_client_number_for_search, bot)


def register_user_handlers(bot):
    bot.register_message_handler(user_start_command,
                                 commands=['user_start'],
                                 pass_bot=True)
    bot.register_message_handler(add_new_lease_button,
                                 func=lambda message: message.text == NameOfButton.ADD_NEW_LEASE_ENTRY,
                                 pass_bot=True)
    bot.register_message_handler(find_lease_button,
                                 func=lambda message: message.text == NameOfButton.FIND_LEASE_ENTRY,
                                 pass_bot=True)
    bot.register_message_handler(find_lease_by_phone_button,
                                 func=lambda message: message.text == NameOfButton.FIND_LEASE_BY_PHONE_NUMBER,
                                 pass_bot=True)
    bot.register_message_handler(make_deposit_button,
                                 func=lambda message: message.text == NameOfButton.MAKE_A_DEPOSIT,
                                 pass_bot=True)
    bot.register_message_handler(check_in_button,
                                 func=lambda message: message.text == NameOfButton.CHECK_IN,
                                 pass_bot=True)
    bot.register_message_handler(blacklist,
                                 func=lambda message: message.text == NameOfButton.BLACKLIST,
                                 pass_bot=True)
    bot.register_message_handler(add_or_remove_client_in_blacklist,
                                 func=lambda
                                     message: message.text == NameOfButton.ADD_CLIENT_TO_BLACKLIST or message.text == NameOfButton.REMOVE_CLIENT_FROM_BLACKLIST,
                                 pass_bot=True)
    bot.register_message_handler(show_client_data,
                                 func=lambda message: message.text == NameOfButton.SHOW_CLIENT_DATA,
                                 pass_bot=True)


def register_user_callback_handlers(bot):
    bot.register_callback_query_handler(apartment_callback,
                                        func=lambda call: True,
                                        pass_bot=True)
    bot.register_callback_query_handler(is_deposit_paid_callback,
                                        func=lambda call: True,
                                        pass_bot=True)
    bot.register_callback_query_handler(check_in_callback,
                                        func=lambda call: True,
                                        pass_bot=True)
