import re
import time
import uuid
from datetime import datetime

from bot.buttons import NameOfButton
from database import Database

USER_START_MENU = [NameOfButton.ADD_NEW_LEASE_ENTRY,
                   NameOfButton.MAKE_A_DEPOSIT,
                   NameOfButton.CHECK_IN,
                   NameOfButton.BLACKLIST,
                   NameOfButton.SHOW_CLIENT_DATA,
                   NameOfButton.FIND_LEASE_ENTRY]


def validate_ukrainian_phone_number(phone_number):
    cleaned_number = re.sub(r'\D', '', phone_number)

    if len(cleaned_number) == 10:
        if cleaned_number.startswith('0'):
            cleaned_number = '+38' + cleaned_number
        elif cleaned_number.startswith('380'):
            cleaned_number = '+' + cleaned_number
        else:
            return None
    elif len(cleaned_number) == 12 and cleaned_number.startswith('+38'):
        pass
    else:
        return None

    return cleaned_number


def get_user_existing_or_admin(message, bot, check_admin=False):
    db = Database()
    user = db.get_user_by_tg_user_id(message.from_user.id)
    if user is None:
        bot.send_message(message.chat.id, '–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ')
        return None
    else:
        if not user.is_admin and check_admin:
            bot.send_message(message.chat.id, '–¢—ã –Ω–µ –∞–¥–º–∏–Ω, –∏—Å–ø–æ–ª—å–∑—É–π /user_start')
            return None
    return user


def generate_unique_filename():
    timestamp = int(time.time())
    unique_id = str(uuid.uuid4())
    filename = f"{timestamp}_{unique_id}"
    return filename


def check_date_format(date_str):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    date_components = date_str.split('/')

    # –ï—Å–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–µ –¥–≤–∞, –∑–Ω–∞—á–∏—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–µ–Ω
    if len(date_components) != 2:
        return None

    # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
    if len(date_components[0].split('.')) == 2:
        date_components[0] += f'.{datetime.now().year}'

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç datetime
        dt = datetime.strptime('/'.join(date_components), "%d.%m.%Y/%H:%M")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        return dt

    except ValueError:
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞, –∑–Ω–∞—á–∏—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–≤–µ—Ä–µ–Ω
        return None


def parse_date_values(date_str):
    date_format = "%d.%m.%Y:%H.%M"
    start_str, end_str = date_str.split('-')
    start_date = datetime.strptime(start_str, date_format)
    end_date = datetime.strptime(end_str, date_format)
    return start_date, end_date


def get_lease_info(lease):
    phone_numbers = ", ".join([phone.number for phone in lease.client.phone_numbers])
    num_documents = len(lease.client.documents) if lease.client.documents else 0
    return f'üë®–ö–ª–∏–µ–Ω—Ç: {lease.client.name if lease.client.name else "–ù–µ –∏–∑–≤–µ—Å—Ç–Ω–æ"}\n' \
           f'üì±–ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞: {phone_numbers}\n' \
           f'üìë–ö–æ–ª-–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {num_documents}\n' \
           f'üè†–ê–¥—Ä–µ—Å —Å–¥–∞–≤–∞–µ–º–æ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã: {lease.apartment.address}\n' \
           f'üìÖ–ü–µ—Ä–∏–æ–¥ —Å–¥–∞—á–∏:{lease.start_date.strftime("%d.%m.%Y | %H:%M")} - {lease.end_date.strftime("%d.%m.%Y | %H:%M")}\n' \
           f'üíµ–°—É–º–º–∞ –∞—Ä–µ–Ω–¥–Ω–æ–π –ø–ª–∞—Ç—ã: {lease.rent_amount}\n' \
           f'üí∏–°—É–º–º–∞ –∑–∞–ª–æ–≥–∞: {lease.deposit}\n\n' \
           f'‚úçÔ∏è–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {lease.additional_details}\n' \
           f'------------------------------------'
